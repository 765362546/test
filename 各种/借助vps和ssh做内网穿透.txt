借助已有的vps(能外网ssh的)   将内网的服务器，利用ssh的反向代理，映射到vps的某端口

参考：
https://blog.csdn.net/weixin_36394852/article/details/72725505


原理：
假设，A机器为内网linux，B机器为外网linux；A只能通过内网访问，B可以通过外网访问
那么A机器也可以ssh连接B服务器
在机器A上做到B机器的反向代理；然后在B机器上做正向的代理实现本地端口的转发：
	将A的22端口，映射到B上的某端口----此时这个端口在B上是监听到127的；在B上对这个端口做个正向代理，映射到0.0.0.0
	
另外，内网服务器上的ssh反向代理命令，有可能会断开，需要借助autossh命令，可以自动重连	
	
ssh参数：
反向代理
ssh -fCNR

正向代理
ssh -fCNL

-f 后台执行ssh指令
-C 允许压缩数据
-N 不执行远程指令
-R 将远程主机(服务器)的某个端口转发到本地端指定机器的指定端口
-L 将本地机(客户机)的某个端口转发到远端指定机器的指定端口
-p 指定远程主机的端口


-----------
加上B机器的ip为123.123.123.123

内网某linux:
ssh -fCNR [B机器IP或省略]:[B机器端口]:[A机器的IP]:[A机器端口] [登陆B机器的用户名@服务器IP]  即将A机器的某端口，映射到B机器上


ssh -fCNR 7280:localhost:22 root@123.123.123.123
这个命令就是将B机器的7280映射到A机器的22端口

外网某linux:
可以netstat一下，能看到7280端口，但是监听在127上
做正向代理
ssh -fCNL [A机器IP或省略]:[A机器端口]:[B机器的IP]:[B机器端口] [登陆B机器的用户名@B机器的IP]   即将B机器的某端口，映射到A机器上；注意，这里的AB，不是这个例子中的AB

我们需要把B机器上的127.0.0.1:7280  映射到0.0.0.0:xxxx  就是自己映射自己
ssh -fCNL *:1234:localhost:7280 root@localhost


此时，通过B机器的外网ip:1234   就能远程A机器了
--------------------------

借助autossh ，保持连接，防止因为超时断开

1. 做免密，毕竟要用autossh，不能每次都输入B机器的密码
在A机器上 ssh-keygen    然后  ssh-copy-id  root@B_ip      #远程的用户，根据实际情况定
2. 在A机器上，安装 autossh    yum install autossh
3. 执行autossh   ,如果好使，可以放到/etc/rc.local 开机自启
autossh -M 7281 -fCNR 7280:localhost:22 root@123.123.123.123 


---------------
整理：
实际上就几条命令


在内网机器上执行：
yum install autossh -y
ssh-keygen
ssh-copy-id    外网用户@外网ip

autossh -M 7281 -fCNR 7280:localhost:22 外网用户@外网ip

然后将上边这句copy到rc.local 

在外网机器上执行：
 
ssh -fCNL *:1234:localhost:7280 外网用户@localhost 

可以把1234换成需要的

------------------------
ssh -p 1234 外网ip   这样就是远程内网那台机器了


===========================
已经建立好上述内网穿透后，只是对那一台内网机器；此时可以利用这个远程，做个隧道
----其实也是用的ssh的正向代理和反向代理，只不过自己写命令比较复杂，直接解压xshell等远程工具更省事一点

我用的是mobaxterm的隧道，更直观一些，非常好用



